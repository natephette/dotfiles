# Determine the real path of this file
# so that it can be sourced from anywhere.
SOURCE="${BASH_SOURCE[0]}"

# Resolve $SOURCE until the file is no longer a symlink.
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"

  # If $SOURCE was a relative symlink, we need to resolve it
  # relative to the path where the symlink file was located.
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done

# This is the real path to this file.
DOTFILES_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

unset SOURCE
unset DIR

# Basic dotfiles.
source $DOTFILES_DIR/exports
source $DOTFILES_DIR/aliases
source $DOTFILES_DIR/paths
source $DOTFILES_DIR/functions/*

# Only load Liquid Prompt in interactive shells (not from a script or scp).
[[ $- = *i* ]] && source "$DOTFILES_DIR/liquidprompt/liquidprompt"

# Bash tab completion.
if [ -f "$(brew --prefix)/etc/bash_completion" ]; then
    source "$(brew --prefix)/etc/bash_completion"
fi

# Virtual environment wrapper.
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    source /usr/local/bin/virtualenvwrapper.sh
fi

# Local and private settings (e.g. git credentials).
if [ -f $HOME/.bash_profile.local ]; then
    source $HOME/.bash_profile.local
fi

# Increase the max number of open file descriptors allowed.
ulimit -n 4096

# Initialize pyenv and pyenv-virtualenv.
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi
